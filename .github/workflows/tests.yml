name: Tests

on: [ workflow_call ]

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

jobs:
  test:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        python-version: ["3.11"]
        os: [macos-latest, ubuntu-latest, windows-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
      - name: Installer Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Préparation de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: Vérifier installation Node.js
        run: npm -v

      - name: Installer PNPM
        uses: pnpm/action-setup@v2.4.0
        with:
          version: latest

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Installer Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Installer dépendances
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Installer la librairie
        run: poetry install --no-interaction

      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Tests simples
        run: poetry run coverage run -m pytest --log-cli-level=DEBUG && poetry run coverage xml

      - name: Tests complets
        env:
          VRAI_SERVEUR: 1
        run: poetry run coverage run -m pytest --log-cli-level=DEBUG && poetry run coverage xml
        
      - name: Envoyer rapports de couverture à Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
